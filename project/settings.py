"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
from os import environ
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = environ.get('NORA_SECRET_KEY', 'super-secret-key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = environ.get('NORA_DEBUG', 'true').lower() in ['true', '1']

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'nora.cornershop.io']


# Application definition

INSTALLED_APPS = [
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'menu.apps.MenuConfig',
    'slack'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['./templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'America/Santiago'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Slack config

SLACK_CLIENT_ID = environ['SLACK_CLIENT_ID']
SLACK_CLIENT_SECRET = environ['SLACK_CLIENT_SECRET']
SLACK_SCOPES = ['reminders:write', 'chat:write', 'users:read']
# restricts users to having a time zone matching the service
NORA_ONLY_LOCALS = environ.get('NORA_ONLY_LOCALS', 'False').lower() in ['true', '1']
# if true, it will use Slackbot reminders to send the message, otherwise it will send a DM.
# it will also hinder much of the functionality of the app.
SLACK_USE_REMINDERS = environ.get('SLACK_USE_REMINDERS', 'False').lower() in ['true', '1']

# Nora's config
# All times are local time

NORA_URL = environ.get('NORA_URL', 'https://nora.cornershop.io')
NORA_NOTIFY_HOUR = max(min(int(environ.get('NORA_NOTIFY_HOUR', 7)), 23), -1) #menus set to a date in the future will notify employees at this time, set to -1 to notify immediately
NORA_NOTIFY_MINUTE = max(min(int(environ.get('NORA_NOTIFY_MINUTE', 0)), 59), 0) #integer between 0-59
NORA_THRESHOLD = max(min(int(environ.get('NORA_THRESHOLD', 11)), 23), 0) #integer between 0-23 that represents the hour up until employees can send orders

if NORA_NOTIFY_HOUR >= NORA_THRESHOLD:
    print('Users will be notified after the threshold, this is probably a mistake')

# Celery config

from celery.schedules import crontab
CELERY_BROKER_URL = 'redis://' + environ.get('NORA_REDIS_SERVER', 'localhost:6379/0')

if NORA_NOTIFY_HOUR >= 0:
    CELERY_BEAT_SCHEDULE = {
        'send_reminders': {
            'task': 'menu.tasks.send_reminders',
            'schedule': crontab(minute=NORA_NOTIFY_MINUTE, hour=NORA_NOTIFY_HOUR)
        }
    }